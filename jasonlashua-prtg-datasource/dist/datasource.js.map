{"version":3,"sources":["../src/datasource.js"],"names":["_","dateMath","utils","PRTGDataSource","instanceSettings","templateSrv","alertSrv","PRTGAPIService","name","url","username","jsonData","prtgApiUser","passhash","prtgApiPasshash","cacheTimeoutMintues","cacheTimeoutMinutes","limitmetrics","meta","prtgAPI","getVersion","then","performPRTGAPILogin","status","title","message","apiVersion","error","statusText","options","from","Math","ceil","parse","range","to","promises","map","targets","target","cloneDeep","t","hide","group","device","channel","sensor","replace","scopedVars","mode","queryMetrics","queryText","queryRaw","Promise","all","flatten","data","results","performPRTGAPIRequest","raw","uri","queryString","Array","isArray","rawData","datapoints","doc","type","textPromise","textValueFrom","getGroups","getHosts","getSensors","resolve","textFilter","filtered","filter","items","filterMatch","item","textProperty","alias","decodeText","document","createElement","innerHTML","value","Date","now","getItemsFromTarget","devices","uniq","historyPromise","getItemHistory","includeSensorName","sensor_raw","keys","length","includeDeviceName","history","hist","datetime","timeseries","getMessages","annotation","sensorId","each","messages","query","queryParts","split","queryFilter","filterExpression","alertError","params","metrics","text","metric","expandable","timeout","set"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;AACKC,c;;AAEAC,W;;;;;;;;;;;;;;;;;;;;;gCAENC,c;AACJ;AACA,gCAAYC,gBAAZ,EAA8BC,WAA9B,EAA2CC,QAA3C,EAAqDC,cAArD,EAAqE;AAAA;;AACnE;;;;;AAKA,eAAKF,WAAL,GAAmBA,WAAnB;AACA,eAAKC,QAAL,GAAgBA,QAAhB;AACA,eAAKE,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,eAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,eAAKC,QAAL,GAAgBN,iBAAiBO,QAAjB,CAA0BC,WAA1C;AACA,eAAKC,QAAL,GAAgBT,iBAAiBO,QAAjB,CAA0BG,eAA1C;AACA,eAAKC,mBAAL,GACEX,iBAAiBO,QAAjB,CAA0BK,mBAA1B,IAAiD,CADnD;AAEA,eAAKC,YAAL,GAAoBb,iBAAiBc,IAAjB,CAAsBD,YAAtB,IAAsC,GAA1D;AACA,eAAKE,OAAL,GAAe,IAAIZ,cAAJ,CACb,KAAKE,GADQ,EAEb,KAAKC,QAFQ,EAGb,KAAKG,QAHQ,EAIb,KAAKE,mBAJQ,CAAf;AAMD;;AAED;;;;;;;2CAGiB;AAAA;;AACf,mBAAO,KAAKI,OAAL,CAAaC,UAAb,GAA0BC,IAA1B,CACL,sBAAc;AACZ,qBAAO,MAAKF,OAAL,CAAaG,mBAAb,GAAmCD,IAAnC,CAAwC,YAAM;AACnD,uBAAO;AACLE,0BAAQ,SADH;AAELC,yBAAO,SAFF;AAGLC,2BAAS,uBAAuBC;AAH3B,iBAAP;AAKD,eANM,CAAP;AAOD,aATI,EAUL,iBAAS;AACP,qBAAO;AACLH,wBAAQ,OADH;AAELC,uBAAOG,MAAMJ,MAAN,GAAe,IAAf,GAAsBI,MAAMC,UAF9B;AAGLH,yBAAS,EAHJ,CAGO;AAHP,eAAP;AAKD,aAhBI,CAAP;AAkBD;;;gCAQKI,O,EAAS;AAAA;;AACb,gBAAMC,OAAOC,KAAKC,IAAL,CAAU/B,SAASgC,KAAT,CAAeJ,QAAQK,KAAR,CAAcJ,IAA7B,IAAqC,IAA/C,CAAb;AACA,gBAAMK,KAAKJ,KAAKC,IAAL,CAAU/B,SAASgC,KAAT,CAAeJ,QAAQK,KAAR,CAAcC,EAA7B,IAAmC,IAA7C,CAAX;AACA,gBAAMC,WAAWpC,EAAEqC,GAAF,CAAMR,QAAQS,OAAd,EAAuB,aAAK;AAC3C,kBAAMC,SAASvC,EAAEwC,SAAF,CAAYC,CAAZ,CAAf;AACA,kBACEF,OAAOG,IAAP,IACA,CAACH,OAAOI,KADR,IAEA,CAACJ,OAAOK,MAFR,IAGA,CAACL,OAAOM,OAHR,IAIA,CAACN,OAAOO,MALV,EAME;AACA,uBAAO,EAAP;AACD;AACD;AACA,kBAAI,CAACP,OAAOV,OAAZ,EAAqB;AACnBU,uBAAOV,OAAP,GAAiB,EAAjB;AACD;AACDU,qBAAOI,KAAP,CAAanC,IAAb,GAAoB,OAAKH,WAAL,CAAiB0C,OAAjB,CAClBR,OAAOI,KAAP,CAAanC,IADK,EAElBqB,QAAQmB,UAFU,CAApB;AAIAT,qBAAOK,MAAP,CAAcpC,IAAd,GAAqB,OAAKH,WAAL,CAAiB0C,OAAjB,CACnBR,OAAOK,MAAP,CAAcpC,IADK,EAEnBqB,QAAQmB,UAFW,CAArB;AAIAT,qBAAOO,MAAP,CAActC,IAAd,GAAqB,OAAKH,WAAL,CAAiB0C,OAAjB,CACnBR,OAAOO,MAAP,CAActC,IADK,EAEnBqB,QAAQmB,UAFW,CAArB;AAIAT,qBAAOM,OAAP,CAAerC,IAAf,GAAsB,OAAKH,WAAL,CAAiB0C,OAAjB,CACpBR,OAAOM,OAAP,CAAerC,IADK,EAEpBqB,QAAQmB,UAFY,CAAtB;AAIA,kBAAIT,OAAOI,KAAP,CAAanC,IAAb,IAAqB,GAAzB,EAA8B;AAC5B+B,uBAAOI,KAAP,CAAanC,IAAb,GAAoB,MAApB;AACD;AACD,kBAAI+B,OAAOK,MAAP,CAAcpC,IAAd,IAAsB,GAA1B,EAA+B;AAC7B+B,uBAAOK,MAAP,CAAcpC,IAAd,GAAqB,MAArB;AACD;AACD,kBAAI+B,OAAOO,MAAP,CAActC,IAAd,IAAsB,GAA1B,EAA+B;AAC7B+B,uBAAOO,MAAP,CAActC,IAAd,GAAqB,MAArB;AACD;AACD,kBAAI+B,OAAOM,OAAP,CAAerC,IAAf,IAAuB,GAA3B,EAAgC;AAC9B+B,uBAAOM,OAAP,CAAerC,IAAf,GAAsB,MAAtB;AACD;AACD,kBAAI,CAAC+B,OAAOV,OAAP,CAAeoB,IAApB,EAA0B;AACxB;AACAV,uBAAOV,OAAP,CAAeoB,IAAf,GAAsB,EAACzC,MAAM,SAAP,EAAtB;AACD;;AAED,kBAAI+B,OAAOV,OAAP,CAAeoB,IAAf,CAAoBzC,IAApB,IAA4B,SAAhC,EAA2C;AACzC,uBAAO,OAAK0C,YAAL,CAAkBX,MAAlB,EAA0BT,IAA1B,EAAgCK,EAAhC,CAAP;AACD,eAFD,MAEO,IAAII,OAAOV,OAAP,CAAeoB,IAAf,CAAoBzC,IAApB,IAA4B,MAAhC,EAAwC;AAC7C,uBAAO,OAAK2C,SAAL,CAAeZ,MAAf,EAAuBT,IAAvB,EAA6BK,EAA7B,CAAP;AACD,eAFM,MAEA,IAAII,OAAOV,OAAP,CAAeoB,IAAf,CAAoBzC,IAApB,IAA4B,KAAhC,EAAuC;AAC5C,uBAAO,OAAK4C,QAAL,CAAcb,MAAd,EAAsBT,IAAtB,EAA4BK,EAA5B,CAAP;AACD;AACF,aAvDgB,CAAjB;AAwDA,mBAAOkB,QAAQC,GAAR,CAAYtD,EAAEuD,OAAF,CAAUnB,QAAV,CAAZ,EAAiCf,IAAjC,CAAsC,mBAAW;AACtD,qBAAO,EAAEmC,MAAMxD,EAAEuD,OAAF,CAAUE,OAAV,CAAR,EAAP;AACD,aAFM,CAAP;AAGD;;;mCACQlB,M,EAAQT,I,EAAMK,E,EAAI;AACzB,mBAAO,KAAKhB,OAAL,CACJuC,qBADI,CACkBnB,OAAOoB,GAAP,CAAWC,GAD7B,EACkCrB,OAAOoB,GAAP,CAAWE,WAD7C,EAEJxC,IAFI,CAEC,mBAAW;AACf,kBAAIyC,MAAMC,OAAN,CAAcC,OAAd,CAAJ,EAA4B;AAC1B,uBAAOhE,EAAEqC,GAAF,CAAM2B,OAAN,EAAe,eAAO;AAC3B,yBAAO,EAAEzB,QAAQ,MAAV,EAAkB0B,YAAY,CAACC,GAAD,CAA9B,EAAqCC,MAAM,MAA3C,EAAP;AACD,iBAFM,CAAP;AAGD,eAJD,MAIO;AACL,uBAAO,EAAE5B,QAAQ,MAAV,EAAkB0B,YAAY,CAACD,OAAD,CAA9B,EAAyCG,MAAM,MAA/C,EAAP;AACD;AACF,aAVI,CAAP;AAWD;;;oCACS5B,M,EAAQT,I,EAAMK,E,EAAI;AAC1B;;;;;;AAMA,gBAAIiC,oBAAJ;AACA,gBAAI7B,OAAOV,OAAP,CAAewC,aAAf,CAA6B7D,IAA7B,IAAqC,OAAzC,EAAkD;AAChD4D,4BAAc,KAAKjD,OAAL,CAAamD,SAAb,CAAuB/B,OAAOI,KAAP,CAAanC,IAApC,CAAd;AACD,aAFD,MAEO,IAAI+B,OAAOV,OAAP,CAAewC,aAAf,CAA6B7D,IAA7B,IAAqC,QAAzC,EAAmD;AACxD4D,4BAAc,KAAKjD,OAAL,CAAaoD,QAAb,CACZhC,OAAOI,KAAP,CAAanC,IADD,EAEZ+B,OAAOK,MAAP,CAAcpC,IAFF,CAAd;AAID,aALM,MAKA,IAAI+B,OAAOV,OAAP,CAAewC,aAAf,CAA6B7D,IAA7B,IAAqC,QAAzC,EAAmD;AACxD4D,4BAAc,KAAKjD,OAAL,CAAaqD,UAAb,CACZjC,OAAOI,KAAP,CAAanC,IADD,EAEZ+B,OAAOK,MAAP,CAAcpC,IAFF,EAGZ+B,OAAOO,MAAP,CAActC,IAHF,CAAd;AAKD,aANM,MAMA;AACL,qBAAO6C,QAAQoB,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAED,gBAAI,CAAClC,OAAOV,OAAP,CAAe6C,UAApB,EAAgC;AAC9BnC,qBAAOV,OAAP,CAAe6C,UAAf,GAA4B,MAA5B;AACD;;AAED,mBAAON,YAAY/C,IAAZ,CAAiB,iBAAS;AAC/B,kBAAMsD,WAAW3E,EAAE4E,MAAF,CAASC,KAAT,EAAgB,gBAAQ;AACvC,uBAAO3E,MAAM4E,WAAN,CACLC,KAAKxC,OAAOV,OAAP,CAAemD,YAAf,CAA4BxE,IAAjC,CADK,EAEL+B,OAAOV,OAAP,CAAe6C,UAFV,CAAP;AAID,eALgB,CAAjB;AAMA,qBAAO1E,EAAEqC,GAAF,CAAMsC,QAAN,EAAgB,gBAAQ;AAC7B,oBAAMM,QAAQF,KAAKxC,OAAOV,OAAP,CAAewC,aAAf,CAA6B7D,IAAlC,CAAd;AACA,oBAAM0E,aAAaC,SAASC,aAAT,CAAuB,UAAvB,CAAnB;AACAF,2BAAWG,SAAX,GAAuBN,KAAKxC,OAAOV,OAAP,CAAemD,YAAf,CAA4BxE,IAAjC,CAAvB;AACA,uBAAO,EAAE+B,QAAQ0C,KAAV,EAAiBhB,YAAY,CAAC,CAACiB,WAAWI,KAAZ,EAAmBC,KAAKC,GAAL,EAAnB,CAAD,CAA7B,EAAP;AACD,eALM,CAAP;AAMD,aAbM,CAAP;AAcD;;;uCACYjD,M,EAAQT,I,EAAMK,E,EAAI;AAAA;;AAC7B,mBAAO,KAAKhB,OAAL,CAAasE,kBAAb,CAAgClD,MAAhC,EAAwClB,IAAxC,CAA6C,iBAAS;AAC3D,kBAAMqE,UAAU1F,EAAE2F,IAAF,CAAO3F,EAAEqC,GAAF,CAAMwC,KAAN,EAAa,QAAb,CAAP,CAAhB;AACA,kBAAMe,iBAAiB5F,EAAEqC,GAAF,CAAMwC,KAAN,EAAa,gBAAQ;AAC1C,uBAAO,OAAK1D,OAAL,CACJ0E,cADI,CACWd,KAAKjC,MADhB,EACwBiC,KAAKvE,IAD7B,EACmCsB,IADnC,EACyCK,EADzC,EAEJd,IAFI,CAEC,mBAAW;AACf,sBAAI4D,QAAQF,KAAKvE,IAAjB;AACA,sBAAI+B,OAAOV,OAAP,CAAeiE,iBAAnB,EAAsC;AACpCb,4BAAQF,KAAKgB,UAAL,GAAkB,IAAlB,GAAyBd,KAAjC;AACD;AACD,sBAAKjF,EAAEgG,IAAF,CAAON,OAAP,EAAgBO,MAAhB,GAAyB,CAA1B,IAAkC1D,OAAOV,OAAP,CAAeqE,iBAArD,EAAyE;AACvEjB,4BAAQF,KAAKnC,MAAL,GAAc,IAAd,GAAqBqC,KAA7B;AACD;AACD,sBAAMhB,aAAajE,EAAEqC,GAAF,CAAM8D,OAAN,EAAe,gBAAQ;AACxC,2BAAO,CAACC,KAAKd,KAAN,EAAac,KAAKC,QAAlB,CAAP;AACD,mBAFkB,CAAnB;AAGA,sBAAMC,aAAa,EAAE/D,QAAQ0C,KAAV,EAAiBhB,YAAYA,UAA7B,EAAnB;AACA,yBAAOqC,UAAP;AACD,iBAfI,CAAP;AAgBD,eAjBsB,CAAvB;AAkBA,qBAAOjD,QAAQC,GAAR,CAAYsC,cAAZ,CAAP;AACD,aArBM,CAAP;AAsBD;;;0CACe/D,O,EAAS;AAAA;;AACvB,gBAAMC,OAAOC,KAAKC,IAAL,CAAU/B,SAASgC,KAAT,CAAeJ,QAAQK,KAAR,CAAcJ,IAA7B,IAAqC,IAA/C,CAAb;AACA,gBAAMK,KAAKJ,KAAKC,IAAL,CAAU/B,SAASgC,KAAT,CAAeJ,QAAQK,KAAR,CAAcC,EAA7B,IAAmC,IAA7C,CAAX;AACA,mBAAO,KAAKhB,OAAL,CACJoF,WADI,CACQzE,IADR,EACcK,EADd,EACkBN,QAAQ2E,UAAR,CAAmBC,QADrC,EAEJpF,IAFI,CAEC,oBAAY;AAChBrB,gBAAE0G,IAAF,CACEC,QADF,EAEE,mBAAW;AACTlF,wBAAQ+E,UAAR,GAAqB3E,QAAQ2E,UAA7B,CADS,CACgC;AAC1C,eAJH,EAKE,MALF;AAOA,qBAAOG,QAAP;AACD,aAXI,CAAP;AAYD;;;0CAUeC,K,EAAO;AAAA;;AACrB,gBAAMhC,SAAS,EAAf;AACA,gBAAMiC,aAAaD,MAAME,KAAN,CAAY,GAAZ,CAAnB;AACAlC,mBAAOT,IAAP,GAAc0C,WAAW,CAAX,CAAd;AACAjC,mBAAOA,MAAP,GAAgBiC,WAAW,CAAX,CAAhB;AACA,gBAAIA,WAAW,CAAX,MAAkB,GAAtB,EAA2B;AACzB,kBAAME,cAAcF,WAAW,CAAX,EAAcC,KAAd,CAAoB,GAApB,CAApB;AACAlC,qBAAOA,MAAP,GAAgBmC,YAAY,CAAZ,CAAhB;AACAnC,qBAAOoC,gBAAP,GAA0B,KAAK3G,WAAL,CAAiB0C,OAAjB,CAAyBgE,YAAY,CAAZ,CAAzB,CAA1B;AACD;AACD,gBAAIlC,cAAJ;AACA,gBAAID,OAAOT,IAAP,IAAe,OAAnB,EAA4B;AAC1B,kBAAIS,OAAOoC,gBAAP,IAA2BpC,OAAOA,MAAP,IAAiB,OAAhD,EAAyD;AACvDC,wBAAQ,KAAK1D,OAAL,CAAamD,SAAb,CAAuBM,OAAOoC,gBAA9B,CAAR;AACD,eAFD,MAEO;AACLnC,wBAAQ,KAAK1D,OAAL,CAAamD,SAAb,EAAR;AACD;AACF,aAND,MAMO,IAAIM,OAAOT,IAAP,IAAe,QAAnB,EAA6B;AAClC,kBAAIS,OAAOoC,gBAAX,EAA6B;AAC3B,oBAAIpC,OAAOA,MAAP,IAAiB,OAArB,EAA8B;AAC5BC,0BAAQ,KAAK1D,OAAL,CAAaoD,QAAb,CAAsBK,OAAOoC,gBAA7B,CAAR;AACD,iBAFD,MAEO,IAAIpC,OAAOA,MAAP,IAAiB,QAArB,EAA+B;AACpCC,0BAAQ,KAAK1D,OAAL,CAAaoD,QAAb,CAAsB,MAAtB,EAA8BK,OAAOoC,gBAArC,CAAR;AACD,iBAFM,MAEA;AACL,uBAAKC,UAAL,CAAgB,qCAAhB;AACA,yBAAO5D,QAAQoB,OAAR,CAAgB,EAAhB,CAAP;AACD;AACF,eATD,MASO;AACLI,wBAAQ,KAAK1D,OAAL,CAAaoD,QAAb,EAAR;AACD;AACF,aAbM,MAaA,IAAIK,OAAOT,IAAP,IAAe,QAAnB,EAA6B;AAClC,kBAAIS,OAAOoC,gBAAX,EAA6B;AAC3B,oBAAIpC,OAAOA,MAAP,IAAiB,OAArB,EAA8B;AAC5BC,0BAAQ,KAAK1D,OAAL,CAAaqD,UAAb,CAAwBI,OAAOoC,gBAA/B,CAAR;AACD,iBAFD,MAEO,IAAIpC,OAAOA,MAAP,IAAiB,QAArB,EAA+B;AACpCC,0BAAQ,KAAK1D,OAAL,CAAaqD,UAAb,CAAwB,MAAxB,EAAgCI,OAAOoC,gBAAvC,CAAR;AACD,iBAFM,MAEA,IAAIpC,OAAOA,MAAP,IAAiB,QAArB,EAA+B;AACpCC,0BAAQ,KAAK1D,OAAL,CAAaqD,UAAb,CAAwB,MAAxB,EAAgC,MAAhC,EAAwCI,OAAOoC,gBAA/C,CAAR;AACD,iBAFM,MAEA;AACL,uBAAKC,UAAL,CAAgB,qCAAhB;AACA,yBAAO5D,QAAQoB,OAAR,CAAgB,EAAhB,CAAP;AACD;AACF,eAXD,MAWO;AACLI,wBAAQ,KAAK1D,OAAL,CAAaqD,UAAb,EAAR;AACD;AACF,aAfM,MAeA,IAAII,OAAOT,IAAP,IAAe,SAAnB,EAA8B;AACnC,kBACES,OAAOA,MAAP,IAAiB,QAAjB,IACA,OAAOA,OAAOoC,gBAAd,IAAkC,QAFpC,EAGE;AACA,oBAAME,SAAS,uCAAuCtC,OAAOoC,gBAA7D;AACAnC,wBAAQ,KAAK1D,OAAL,CAAauC,qBAAb,CAAmC,YAAnC,EAAiDwD,MAAjD,CAAR;AACD,eAND,MAMO;AACL,qBAAKD,UAAL,CAAgB,sCAAhB;AACA,uBAAO5D,QAAQoB,OAAR,CAAgB,EAAhB,CAAP;AACD;AACF;AACD,mBAAOI,MAAMxD,IAAN,CAAW,mBAAW;AAC3B,qBAAOrB,EAAEqC,GAAF,CACL8E,OADK,EAEL,kBAAU;AACR,uBAAO,EAAEC,MAAMC,OAAOzC,OAAOT,IAAd,CAAR,EAA6BmD,YAAY,CAAzC,EAAP;AACD,eAJI,EAKL,MALK,CAAP;AAOD,aARM,CAAP;AASD;;;qCAEU7F,O,EAAyB;AAAA,gBAAhB8F,OAAgB,uEAAN,IAAM;;AAClC,iBAAKjH,QAAL,CAAckH,GAAd,CAAkB,gBAAlB,EAAoC/F,OAApC,EAA6C,OAA7C,EAAsD8F,OAAtD;AACD;;;;;;gCAGMpH,c","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport * as dateMath from \"app/core/utils/datemath\";\nimport \"./PRTGAPIService\";\nimport * as utils from \"./utils\";\n\nclass PRTGDataSource {\n  /** @ngInject */\n  constructor(instanceSettings, templateSrv, alertSrv, PRTGAPIService) {\n    /**\n     * PRTG Datasource\n     *\n     * @param {object} Grafana Datasource Object\n     */\n    this.templateSrv = templateSrv;\n    this.alertSrv = alertSrv;\n    this.name = instanceSettings.name;\n    this.url = instanceSettings.url;\n    this.username = instanceSettings.jsonData.prtgApiUser;\n    this.passhash = instanceSettings.jsonData.prtgApiPasshash;\n    this.cacheTimeoutMintues =\n      instanceSettings.jsonData.cacheTimeoutMinutes || 5;\n    this.limitmetrics = instanceSettings.meta.limitmetrics || 100;\n    this.prtgAPI = new PRTGAPIService(\n      this.url,\n      this.username,\n      this.passhash,\n      this.cacheTimeoutMintues\n    );\n  }\n\n  /**\n   * Test the datasource\n   */\n  testDatasource() {\n    return this.prtgAPI.getVersion().then(\n      apiVersion => {\n        return this.prtgAPI.performPRTGAPILogin().then(() => {\n          return {\n            status: \"success\",\n            title: \"Success\",\n            message: \"PRTG API version: \" + apiVersion\n          };\n        });\n      },\n      error => {\n        return {\n          status: \"error\",\n          title: error.status + \": \" + error.statusText,\n          message: \"\" //error.config.url\n        };\n      }\n    );\n  }\n  /**\n   * Data Source Query\n   * returns timeseries array of values\n   * \n   * @param {object} options; Dataset Options including targets, etc.\n   * @return [array]\n   */\n  query(options) {\n    const from = Math.ceil(dateMath.parse(options.range.from) / 1000);\n    const to = Math.ceil(dateMath.parse(options.range.to) / 1000);\n    const promises = _.map(options.targets, t => {\n      const target = _.cloneDeep(t);\n      if (\n        target.hide ||\n        !target.group ||\n        !target.device ||\n        !target.channel ||\n        !target.sensor\n      ) {\n        return [];\n      }\n      //play nice with legacy dashboards, add options property\n      if (!target.options) {\n        target.options = {};\n      }\n      target.group.name = this.templateSrv.replace(\n        target.group.name,\n        options.scopedVars\n      );\n      target.device.name = this.templateSrv.replace(\n        target.device.name,\n        options.scopedVars\n      );\n      target.sensor.name = this.templateSrv.replace(\n        target.sensor.name,\n        options.scopedVars\n      );\n      target.channel.name = this.templateSrv.replace(\n        target.channel.name,\n        options.scopedVars\n      );\n      if (target.group.name == \"*\") {\n        target.group.name = \"/.*/\";\n      }\n      if (target.device.name == \"*\") {\n        target.device.name = \"/.*/\";\n      }\n      if (target.sensor.name == \"*\") {\n        target.sensor.name = \"/.*/\";\n      }\n      if (target.channel.name == \"*\") {\n        target.channel.name = \"/.*/\";\n      }\n      if (!target.options.mode) {\n        //legacy dashboard compat.\n        target.options.mode = {name: \"Metrics\"};\n      }\n\n      if (target.options.mode.name == \"Metrics\") {\n        return this.queryMetrics(target, from, to);\n      } else if (target.options.mode.name == \"Text\") {\n        return this.queryText(target, from, to);\n      } else if (target.options.mode.name == \"Raw\") {\n        return this.queryRaw(target, from, to);\n      }\n    });\n    return Promise.all(_.flatten(promises)).then(results => {\n      return { data: _.flatten(results) };\n    });\n  }\n  queryRaw(target, from, to) {\n    return this.prtgAPI\n      .performPRTGAPIRequest(target.raw.uri, target.raw.queryString)\n      .then(rawData => {\n        if (Array.isArray(rawData)) {\n          return _.map(rawData, doc => {\n            return { target: \"blah\", datapoints: [doc], type: \"docs\" };\n          });\n        } else {\n          return { target: \"blah\", datapoints: [rawData], type: \"docs\" };\n        }\n      });\n  }\n  queryText(target, from, to) {\n    /**\n     * Get items isn't required\n     * case value from: sensor group or device\n     * -> perform query, then filter.\n     * existing getDevices getSensors getGroups can be used since they include all properties\n     */\n    let textPromise;\n    if (target.options.textValueFrom.name == \"group\") {\n      textPromise = this.prtgAPI.getGroups(target.group.name);\n    } else if (target.options.textValueFrom.name == \"device\") {\n      textPromise = this.prtgAPI.getHosts(\n        target.group.name,\n        target.device.name\n      );\n    } else if (target.options.textValueFrom.name == \"sensor\") {\n      textPromise = this.prtgAPI.getSensors(\n        target.group.name,\n        target.device.name,\n        target.sensor.name\n      );\n    } else {\n      return Promise.resolve([]);\n    }\n\n    if (!target.options.textFilter) {\n      target.options.textFilter = \"/.*/\";\n    }\n\n    return textPromise.then(items => {\n      const filtered = _.filter(items, item => {\n        return utils.filterMatch(\n          item[target.options.textProperty.name],\n          target.options.textFilter\n        );\n      });\n      return _.map(filtered, item => {\n        const alias = item[target.options.textValueFrom.name];\n        const decodeText = document.createElement(\"textarea\");\n        decodeText.innerHTML = item[target.options.textProperty.name];\n        return { target: alias, datapoints: [[decodeText.value, Date.now()]] };\n      });\n    });\n  }\n  queryMetrics(target, from, to) {\n    return this.prtgAPI.getItemsFromTarget(target).then(items => {\n      const devices = _.uniq(_.map(items, \"device\"));\n      const historyPromise = _.map(items, item => {\n        return this.prtgAPI\n          .getItemHistory(item.sensor, item.name, from, to)\n          .then(history => {\n            let alias = item.name;\n            if (target.options.includeSensorName) {\n              alias = item.sensor_raw + \": \" + alias;\n            }\n            if ((_.keys(devices).length > 1) ||  (target.options.includeDeviceName)) {\n              alias = item.device + \": \" + alias;\n            }\n            const datapoints = _.map(history, hist => {\n              return [hist.value, hist.datetime];\n            });\n            const timeseries = { target: alias, datapoints: datapoints };\n            return timeseries;\n          });\n      });\n      return Promise.all(historyPromise);\n    });\n  }\n  annotationQuery(options) {\n    const from = Math.ceil(dateMath.parse(options.range.from) / 1000);\n    const to = Math.ceil(dateMath.parse(options.range.to) / 1000);\n    return this.prtgAPI\n      .getMessages(from, to, options.annotation.sensorId)\n      .then(messages => {\n        _.each(\n          messages,\n          message => {\n            message.annotation = options.annotation; //inject the annotation into the object\n          },\n          this\n        );\n        return messages;\n      });\n  }\n\n  /* Find Metrics from templated letiables\n    *\n    * @param query Query string:\n    * channel:sensor=#### <-- must use \n    * sensor:device=$device or * or numeric ID\n    * device:group=$group or * or numeric ID\n    * group:* or name\n    */\n  metricFindQuery(query) {\n    const filter = {};\n    const queryParts = query.split(\":\");\n    filter.type = queryParts[0];\n    filter.filter = queryParts[1];\n    if (queryParts[1] !== \"*\") {\n      const queryFilter = queryParts[1].split(\"=\");\n      filter.filter = queryFilter[0];\n      filter.filterExpression = this.templateSrv.replace(queryFilter[1]);\n    }\n    let items;\n    if (filter.type == \"group\") {\n      if (filter.filterExpression && filter.filter == \"group\") {\n        items = this.prtgAPI.getGroups(filter.filterExpression);\n      } else {\n        items = this.prtgAPI.getGroups();\n      }\n    } else if (filter.type == \"device\") {\n      if (filter.filterExpression) {\n        if (filter.filter == \"group\") {\n          items = this.prtgAPI.getHosts(filter.filterExpression);\n        } else if (filter.filter == \"device\") {\n          items = this.prtgAPI.getHosts(\"/.*/\", filter.filterExpression);\n        } else {\n          this.alertError(\"Device template query is malformed.\");\n          return Promise.resolve([]);\n        }\n      } else {\n        items = this.prtgAPI.getHosts();\n      }\n    } else if (filter.type == \"sensor\") {\n      if (filter.filterExpression) {\n        if (filter.filter == \"group\") {\n          items = this.prtgAPI.getSensors(filter.filterExpression);\n        } else if (filter.filter == \"device\") {\n          items = this.prtgAPI.getSensors(\"/.*/\", filter.filterExpression);\n        } else if (filter.filter == \"sensor\") {\n          items = this.prtgAPI.getSensors(\"/.*/\", \"/.*/\", filter.filterExpression);\n        } else {\n          this.alertError(\"Sensor template query is malformed.\");\n          return Promise.resolve([]);\n        }\n      } else {\n        items = this.prtgAPI.getSensors();\n      }\n    } else if (filter.type == \"channel\") {\n      if (\n        filter.filter == \"sensor\" &&\n        typeof filter.filterExpression == \"number\"\n      ) {\n        const params = \"&content=channels&columns=name&id=\" + filter.filterExpression;\n        items = this.prtgAPI.performPRTGAPIRequest(\"table.json\", params);\n      } else {\n        this.alertError(\"Channel template query is malformed.\");\n        return Promise.resolve([]);\n      }\n    }\n    return items.then(metrics => {\n      return _.map(\n        metrics,\n        metric => {\n          return { text: metric[filter.type], expandable: 0 };\n        },\n        this\n      );\n    });\n  }\n\n  alertError(message, timeout = 5000) {\n    this.alertSrv.set(\"PRTG API Error\", message, \"error\", timeout);\n  }\n}\n\nexport { PRTGDataSource };"]}