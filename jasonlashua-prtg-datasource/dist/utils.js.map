{"version":3,"sources":["../src/utils.js"],"names":["isRegex","str","regexPattern","test","isTemplateVariable","match","buildRegex","matches","pattern","flags","undefined","RegExp","escapeRegex","value","replace","filterMatch","findItem","filterStr","invert","result","rex"],"mappings":";;;;;;AASO,WAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAC3B,WAAOC,aAAaC,IAAb,CAAkBF,GAAlB,CAAP;AACD;;qBAFeD,O;;AAIT,WAASI,kBAAT,CAA4BH,GAA5B,EAAiC;AACtC,QAAIA,OAAOA,IAAII,KAAJ,CAAU,OAAV,CAAX,EAA+B;AAC7B,aAAO,IAAP;AACD;AACD,WAAO,KAAP;AACD;;gCALeD,kB;;AAOT,WAASE,UAAT,CAAoBL,GAApB,EAAyB;AAC9B,QAAMM,UAAUN,IAAII,KAAJ,CAAUH,YAAV,CAAhB;AACA,QAAMM,UAAUD,QAAQ,CAAR,CAAhB;AACA,QAAME,QAAQF,QAAQ,CAAR,MAAe,EAAf,GAAoBA,QAAQ,CAAR,CAApB,GAAiCG,SAA/C;AACA,WAAO,IAAIC,MAAJ,CAAWH,OAAX,EAAoBC,KAApB,CAAP;AACD;;AAED;AACA;;wBARgBH,U;;AAST,WAASM,WAAT,CAAqBC,KAArB,EAA4B;AACjC,WAAOA,MAAMC,OAAN,CAAc,uBAAd,EAAuC,MAAvC,CAAP;AACD;;yBAFeF,W;;AAIT,WAASG,WAAT,CAAqBC,QAArB,EAA+BC,SAA/B,EAA0D;AAAA,QAAhBC,MAAgB,uEAAP,KAAO;;AAC/D,QAAIC,eAAJ;AACA,QAAInB,QAAQiB,SAAR,CAAJ,EAAwB;AACtB,UAAMG,MAAMd,WAAWW,SAAX,CAAZ;AACAE,eAASC,IAAIjB,IAAJ,CAASa,QAAT,CAAT;AACD,KAHD,MAGO;AACLG,eAASH,aAAaC,SAAtB;AACD;AACD,QAAIC,MAAJ,EAAY;AACV,aAAO,CAACC,MAAR;AACD;AACD,WAAOA,MAAP;AACD;;yBAZeJ,W;;;;;8BA1BHb,Y,GAAe,qB","file":"utils.js","sourcesContent":["/**\n * Global helper functions\n * \n * mostly copied from alexanderzobnin-zabbix-app - thanks!\n */\n\n// Pattern for testing regex\nexport const regexPattern = /^\\/(.*)\\/([gmi]*)$/m;\n\nexport function isRegex(str) {\n  return regexPattern.test(str);\n}\n\nexport function isTemplateVariable(str) {\n  if (str && str.match(/\\$\\w+/)) {\n    return true;\n  }\n  return false;\n}\n\nexport function buildRegex(str) {\n  const matches = str.match(regexPattern);\n  const pattern = matches[1];\n  const flags = matches[2] !== \"\" ? matches[2] : undefined;\n  return new RegExp(pattern, flags);\n}\n\n// Need for template variables replace\n// From Grafana's templateSrv.js\nexport function escapeRegex(value) {\n  return value.replace(/[\\\\^$*+?.()|[\\]{}\\/]/g, \"\\\\$&\");\n}\n\nexport function filterMatch(findItem, filterStr, invert = false) {\n  let result;\n  if (isRegex(filterStr)) {\n    const rex = buildRegex(filterStr);\n    result = rex.test(findItem);\n  } else {\n    result = findItem === filterStr;\n  }\n  if (invert) {\n    return !result;\n  }\n  return result;\n}\n"]}